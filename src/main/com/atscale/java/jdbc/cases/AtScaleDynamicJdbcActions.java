package com.atscale.java.jdbc.cases;

import org.galaxio.gatling.javaapi.actions.QueryActionBuilder;
import org.galaxio.gatling.javaapi.check.simpleCheckType;
import com.atscale.java.utils.QueryHistoryFileUtil;
import com.atscale.java.dao.QueryHistoryDto;
import static org.galaxio.gatling.javaapi.JdbcDsl.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class AtScaleDynamicJdbcActions {

    private AtScaleDynamicJdbcActions() {
        // Prevent instantiation
    }

    private static List<NamedQueryActionBuilder> createBuildersJdbc(String cubeName) {
        List<NamedQueryActionBuilder> builders = new ArrayList<>();

        String filePath = QueryHistoryFileUtil.getJdbcFilePath(cubeName);
        try {
            List<QueryHistoryDto> history = QueryHistoryFileUtil.readQueryHistoryFromFile(filePath);
            if (history.isEmpty()) {
                throw new IllegalArgumentException(String.format("No queries found in the history file: %s", filePath));
            }

            for (QueryHistoryDto query : history) {
                String queryName = query.getQueryName();
                QueryActionBuilder builder = jdbc(queryName)
                        .query(query.getInboundText())
                        .check(simpleCheck(simpleCheckType.NonEmpty),
                                allResults().saveAs("queryResultSet"));  // Save data to session variable don't change this session variable name
                builders.add(new NamedQueryActionBuilder(builder, queryName));
            }
            return builders;
        } catch(FileNotFoundException e) {
            throw new RuntimeException(String.format("Query history file not found: %s.  It should be generated by running the QueryExtractExecutor. See README.md for instructions", filePath), e);
        } catch(IOException e) {
            throw new RuntimeException("Error reading query history file: " + filePath, e);
        }
    }

    public static NamedQueryActionBuilder[] createBuildersJdbcQueries(String model) {
        List<NamedQueryActionBuilder> builders = createBuildersJdbc(model);
        return builders.toArray(new NamedQueryActionBuilder[0]);
    }
}

